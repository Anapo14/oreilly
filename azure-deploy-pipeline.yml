# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  # imageName: 'oreillyconference.azurecr.io/tweeter-app:latest'
  containerendpoint: 'oreillyconference.azurecr.io'
  containerrepo: tweeter-app:latest
  containerName: 'tweeterapp'
  ConnectedServiceName: 'Pipelines_AppBuilding'
  WebAppName: tweeteroreilly
  #resourcegroup that contains Postgres Database
  dbResourceGroup: appsvc_rg_linux_centralus
  #server name of database
steps:
- script: docker login oreillyconference.azurecr.io -u oreillyconference -p $DOCKER_LOGIN_PASSWORD
  env:
    DOCKER_LOGIN_PASSWORD: $(ACR_KEY)
  displayName: 'docker login'
- script: docker build -f Dockerfile -t $(containerendpoint)/$(containerrepo) .
  displayName: 'docker build'
- script: docker run --name $(containerName) --detach -e DJANGO_SETTINGS_MODULE=tweeter3.settings.production -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD -e DB_NAME=$DB_NAME -e DB_HOST=$DB_HOST $(containerendpoint)/$(containerrepo)
  env:
    DB_USER: $(DB_USER)
    DB_PASSWORD: $(DB_PASSWORD)
    DB_NAME: $(DB_NAME)
    DB_HOST: $(DB_HOST)
  displayName: 'start container'
  #Get the currently running hosted agent's IP address.
- bash: |
    export MYIP=$(curl -s https://api.ipify.org)
    echo "##vso[task.setvariable variable=MY_IP]$MYIP"
- script: |
        echo "This is the IP:$(MY_IP)" 
  displayName: Determine Hosted Agent's IP Address
  #Create Firewall rule for Postgres Database
- task: AzureCLI@1
  displayName: Create Firewall Rule for Postgres Database
  inputs:
  #Set an environment variable that contains the name of the service connection you created in the settings panel of Pipelines.
    azureSubscription: $(ConnectedServiceName)
    # connectedServiceNameARM: $(AZURE_SERVICE_CONNECTION)
    # azureConnectionType: 'Azure Resource Manager'
    scriptLocation: 'inlineScript'
    inlineScript: az postgres server firewall-rule create -g $(dbResourceGroup) -s $(DB_HOST) -n allowip --start-ip-address $(MY_IP) --end-ip-address $(MY_IP)
- script: docker exec $(containerName) python3 manage.py migrate
  displayName: run django migrations
- script: docker push $(containerendpoint)/$(containerrepo) 
  displayName: 'docker push'
- task: AzureRMWebAppDeployment@4
  displayName: Azure App Service Deploy
  inputs:
    appType: webAppContainer
    ConnectedServiceName: $(ConnectedServiceName)
    WebAppName: $(WebAppName)
    DockerNamespace: $(containerendpoint)
    DockerRepository: $(containerrepo)
    #DockerImageTag is optional
    #DockerImageTag: $(Build.BuildId)